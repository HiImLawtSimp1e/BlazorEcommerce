@page "/product/{id:int}"
@inject IProductService ProductService
@inject ICartService CartService
@inject ILocalStorageService LocalStorage

@if (product == null)
{
    <span>Loading Product ...</span>
}
else
{
    <div class="media">
        <div class="media-img-wrapper mr-2">
            <img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
        </div>
        <div class="media-body">
            <h2 class="mb-0">@product.Title</h2>
            <p>@product.Description</p>

            @if (GetSelectedVariant != null && product.ProductVariants.Count > 1)
            {
                <div class="form-group">
                    <select class="form-control" @bind="currentTypeId">
                        @foreach (var variant in product.ProductVariants)
                        {
                            <option value="@variant.ProductTypeId">@variant.ProductType.Name</option>
                        }
                    </select>
                </div>
            }

            @if (GetSelectedVariant != null)
            {
                @if (GetSelectedVariant().OriginalPrice > GetSelectedVariant().Price)
                {
                    <h6 class="text-muted original-price">$@GetSelectedVariant().OriginalPrice</h6>
                }
                <h4 class="sale-price">
                    $@GetSelectedVariant().Price
                </h4>
            }
            <EditForm Model="cartItem">
                <div class="form-group">
                    <InputNumber id="quantity" @bind-Value="cartItem.Quantity" class="form-control" style="width: 70px;" />
                </div>
            </EditForm>
            <button class="btn btn-primary" @onclick="AddToCart">
                <i class="oi oi-cart"></i>&nbsp;&nbsp;&nbsp;Add to Cart
            </button>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }


    private Product? product = null;

    private int currentTypeId = 1;

    private CartItem cartItem = new CartItem { Quantity = 1 };

    protected override async Task OnParametersSetAsync()
    {
        var result = await ProductService.GetProduct(Id);
        product = result.Data;
        if (product.ProductVariants.Count > 0)
        {
            currentTypeId = product.ProductVariants[0].ProductTypeId;
        }
    }
    private ProductVariant GetSelectedVariant()
    {
        var variants = product.ProductVariants.FirstOrDefault(v => v.ProductTypeId == currentTypeId);
        return variants;
    }

    private async Task AddToCart()
    {
        var productVariant = GetSelectedVariant();
        cartItem.ProductId = productVariant.ProductId;
        cartItem.ProductTypeId = productVariant.ProductTypeId;

        await CartService.AddToCart(cartItem);
    }


}
