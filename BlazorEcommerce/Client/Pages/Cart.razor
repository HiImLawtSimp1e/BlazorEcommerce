@page "/cart"
@inject ICartService CartService

<h3>Shopping Cart</h3>

@if (cartProducts == null || cartProducts.Count <= 0)
{
    <span> You have no item in your cart. </span>
}
else
{
    <div>
        @foreach (var product in cartProducts)
        {
            <div class="item-container">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="item-image" />
                </div>
                <div class="item-name">
                    <h5>
                        <a href="/product/@product.ProductId">
                            @product.ProductTitle
                        </a>
                    </h5>
                    <span>
                        @product.ProductTypeName
                    </span> <br />
                    <button class="btn-delete" @onclick="@(() => DeleteItem(product))">
                        Delete
                    </button>
                </div>
                <div class="cart-product-price">
                    @product.Price
                </div>
            </div>
        }
        <div class="cart-product-price">
            Total (@cartProducts.Count): $@cartProducts.Sum(product => product.Price)
        </div>
    </div>
}



@code {
    List<CartItemDTO> cartProducts;

    protected override async Task OnInitializedAsync()
    {
        cartProducts = await CartService.GetCartItems();
    }

    private async Task DeleteItem(CartItemDTO item)
    {
        await CartService.DeleteItem(item);
        cartProducts = await CartService.GetCartItems();
    }
}
