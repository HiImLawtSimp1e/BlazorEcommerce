@page "/cart"
@inject ICartService CartService
@inject IOrderService OrderService
@inject NavigationManager NavigationManager

<PageTitle>Shopping Cart</PageTitle>


<h3>Shopping Cart</h3>

@if (cartProducts == null || cartProducts.Count <= 0)
{
    <span> @message </span>
}
else
{
    <div>
        @foreach (var product in cartProducts)
        {
            <div class="item-container">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="item-image" />
                </div>
                <div class="item-name">
                    <h5>
                        <a href="/product/@product.ProductId">
                            @product.ProductTitle
                        </a>
                    </h5>
                    <span>
                        @product.ProductTypeName
                    </span> <br />
                    <button class="btn-delete" @onclick="@(() => DeleteItem(product.ProductId, product.ProductTypeId))">
                        Delete
                    </button>
                    <input type="number" value="@product.Quantity" @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))" class="form-control input-quantity" min="1" />
                </div>
                <div class="cart-product-price">
                    $@(
                       product.Price * product.Quantity
                       )
                </div>
            </div>
        }
        <div class="cart-product-price">
            Total (@cartProducts.Count): $@cartProducts.Sum(product => product.Price * product.Quantity)
        </div>
        <button @onclick="PlaceOrder" class="btn alert-success float-end mt-1"> Checkout </button>
    </div>
}

@code {
    List<CartItemResponseDTO> cartProducts = null;

    string message = "Loading cart...";

    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }

    private async Task DeleteItem(int productId, int productTypeId)
    {
        await CartService.DeleteItem(productId, productTypeId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        await CartService.GetCartItemsCount();
        cartProducts = await CartService.GetCartProduct();
        if (cartProducts == null || cartProducts.Count == 0)
        {
            message = "You have no item in your cart.";
        }
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartItemResponseDTO product)
    {
        product.Quantity = int.Parse(e.Value.ToString());
        if (product.Quantity < 1)
            product.Quantity = 1;
        await CartService.UpdateQuantity(product);
    }

    private async Task PlaceOrder()
    {
        string url = await OrderService.PlaceOrder();
        NavigationManager.NavigateTo(url);
    }

}
